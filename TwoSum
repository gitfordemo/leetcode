Time complexity: O(n2)
For each element, we try to find its complement by looping through the rest of the array

Space complexity: O(1)
The space required does not depend on the size of the input array, so only constant space is used.

public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        for (int i = 0; i < nums.Length; i++)
        {
            for(int j = i + 1; j < nums.Length; j++)
            {
                if (nums[i] + nums[j] == target)
                {
                    return new[] {i, j};
                }
            }
        }
        return null;
    }
}

---------------------------------------------------------------------------------------------------

public class Solution {
    public int[] TwoSum(int[] nums, int target) {
                var dictionary = new Dictionary<int, int>();
        for (int i = 0; i < nums.Length; i++)
        {
            var val = target - nums[i];
            if (dictionary.ContainsKey(val))
                return new[] { dictionary.GetValueOrDefault(val), i };

            dictionary.TryAdd(nums[i], i);
        }
        return null;
    }
}
